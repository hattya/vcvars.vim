Describe #call()
  Before all
    let V = vital#vcvars#import('Prelude')

    let src = tempname() . '.c'
    let arch = has('win64') ? '64' : '32'

    let data = [
    \  '#include <stdio.h>',
    \  'int main(void) {',
    \  '#ifdef _WIN64',
    \  '  printf("%d:64", _MSC_VER);',
    \  '#else',
    \  '  printf("%d:32", _MSC_VER);',
    \  '#endif',
    \  '  return 0;',
    \  '}',
    \]
    call writefile(data, src)
  End

  After all
    call delete(src)
  End

  Before each
    let tmp = tempname()
    let obj = tmp . '.obj'
    let exe = tmp . '.exe'
    let expr = printf('!cl /nologo "/Fo%s" "/Fe%s" /MD "%s" >NUL', obj, exe, src)
  End

  After each
    for f in V.glob(tmp . '*')
      call delete(f)
    endfor
  End

  It cannot compile
    call vcvars#call(expr, '2008', 'x86')
    silent call system(exe)
    Assert NotEquals(v:shell_error, 0)
  End

  It compiles with Visual Studio 2010
    if !vcvars#has('2010')
      Skip requires Visual Studio 2010
    endif

    call vcvars#call(expr, '2010', 'x86')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1600:32')

    call vcvars#call(expr, '2010', 'x64')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1600:64')

    call vcvars#call(expr, '2010')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1600:' . arch)
  End

  It compiles with Visual Studio 2012
    if !vcvars#has('2012')
      Skip requires Visual Studio 2012
    endif

    call vcvars#call(expr, '2012', 'x86')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1700:32')

    call vcvars#call(expr, '2012', 'x64')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1700:64')

    call vcvars#call(expr, '2012')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1700:' . arch)
  End

  It compiles with Visual Studio 2013
    if !vcvars#has('2013')
      Skip requires Visual Studio 2013
    endif

    call vcvars#call(expr, '2013', 'x86')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1800:32')

    call vcvars#call(expr, '2013', 'x64')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1800:64')

    call vcvars#call(expr, '2013')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1800:' . arch)
  End

  It compiles with Visual Studio 2015
    if !vcvars#has('2015')
      Skip requires Visual Studio 2015
    endif

    call vcvars#call(expr, '2015', 'x86')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1900:32')

    call vcvars#call(expr, '2015', 'x64')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1900:64')

    call vcvars#call(expr, '2015')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert Equals(out, '1900:' . arch)
  End

  It complies with Visual Studio 2017
    if !vcvars#has('2017')
      Skip requires Visual Studio 2017
    endif

    call vcvars#call(expr, '2017', 'x86')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert  Match(out, '191\d:32')

    call vcvars#call(expr, '2017', 'x64')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert  Match(out, '191\d:64')

    call vcvars#call(expr, '2017')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert  Match(out, '191\d:' . arch)
  End

  It complies with Visual Studio 2019
    if !vcvars#has('2019')
      Skip requires Visual Studio 2019
    endif

    call vcvars#call(expr, '2019', 'x86')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert  Match(out, '192\d:32')

    call vcvars#call(expr, '2019', 'x64')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert  Match(out, '192\d:64')

    call vcvars#call(expr, '2019')
    silent let out = system(exe)
    Assert Equals(v:shell_error, 0)
    Assert  Match(out, '192\d:' . arch)
  End
End

Describe #get()
  Before all
    let arches = [['x86'], ['x64'], ['x86-64'], ['x86_64'], ['amd64'], []]
  End

  It returns empty dict
    Assert Equals(vcvars#get('2008', 'x86'), {})
  End

  It returns Visual Studio 2010 environment variables
    if !vcvars#has('2010')
      Skip requires Visual Studio 2010
    endif

    for ver in ['2010', '10.0']
      for arch in arches
        let vars = call('vcvars#get', [ver] + arch)
        Assert IsDict(vars)
        Assert NotEmpty(vars)
        Assert NotEmpty(Where('nmake.exe', vars.path))
        Assert NotEmpty(Where('rc.exe', vars.path))
      endfor
      Assert Equals(vcvars#get(ver, 'ia64'), {})
    endfor
  End

  It returns Visual Studio 2012 environment variables
    if !vcvars#has('2012')
      Skip requires Visual Studio 2012
    endif

    for ver in ['2012', '11.0']
      for arch in arches
        let vars = call('vcvars#get', [ver] + arch)
        Assert IsDict(vars)
        Assert NotEmpty(vars)
        Assert NotEmpty(Where('nmake.exe', vars.path))
        Assert NotEmpty(Where('rc.exe', vars.path))
      endfor
      Assert Equals(vcvars#get(ver, 'arm'), {})
    endfor
  End

  It returns Visual Studio 2013 environment variables
    if !vcvars#has('2013')
      Skip requires Visual Studio 2013
    endif

    for ver in ['2013', '12.0']
      for arch in arches
        let vars = call('vcvars#get', [ver] + arch)
        Assert IsDict(vars)
        Assert NotEmpty(vars)
        Assert NotEmpty(Where('nmake.exe', vars.path))
        Assert NotEmpty(Where('rc.exe', vars.path))
      endfor
      Assert Equals(vcvars#get(ver, 'arm'), {})
    endfor
  End

  It returns Visual Studio 2015 environment variables
    if !vcvars#has('2015')
      Skip requires Visual Studio 2015
    endif

    for ver in ['2015', '14.0']
      for arch in arches
        let vars = call('vcvars#get', [ver] + arch)
        Assert IsDict(vars)
        Assert NotEmpty(vars)
        Assert NotEmpty(Where('nmake.exe', vars.path))
        Assert NotEmpty(Where('rc.exe', vars.path))
      endfor
      Assert Equals(vcvars#get(ver, 'arm'), {})
    endfor
  End

  It returns Visual Studio 2017 environment variables
    if !vcvars#has('2017')
      Skip requires Visual Studio 2017
    endif

    for ver in ['2017', '15.0']
      for arch in arches
        let vars = call('vcvars#get', [ver] + arch)
        Assert IsDict(vars)
        Assert NotEmpty(vars)
        Assert NotEmpty(Where('nmake.exe', vars.path))
        Assert NotEmpty(Where('rc.exe', vars.path))
      endfor
      Assert Equals(vcvars#get(ver, 'arm'), {})
    endfor
  End

  It returns Visual Studio 2019 environment variables
    if !vcvars#has('2019')
      Skip requires Visual Studio 2019
    endif

    for ver in ['2019', '16.0']
      for arch in arches
        let vars = call('vcvars#get', [ver] + arch)
        Assert IsDict(vars)
        Assert NotEmpty(vars)
        Assert NotEmpty(Where('nmake.exe', vars.path))
        Assert NotEmpty(Where('rc.exe', vars.path))
      endfor
      Assert Equals(vcvars#get(ver, 'arm'), {})
    endfor
  End
End
